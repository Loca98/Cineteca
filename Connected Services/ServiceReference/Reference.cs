//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cineteca.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServerServices")]
    public interface IServerServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/DoWork", ReplyAction="http://tempuri.org/IServerServices/DoWorkResponse")]
        bool DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/DoWork", ReplyAction="http://tempuri.org/IServerServices/DoWorkResponse")]
        System.Threading.Tasks.Task<bool> DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/GetNomeUtente", ReplyAction="http://tempuri.org/IServerServices/GetNomeUtenteResponse")]
        string GetNomeUtente();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/GetNomeUtente", ReplyAction="http://tempuri.org/IServerServices/GetNomeUtenteResponse")]
        System.Threading.Tasks.Task<string> GetNomeUtenteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/RegisterUser", ReplyAction="http://tempuri.org/IServerServices/RegisterUserResponse")]
        bool RegisterUser(string email, string passw, string nome, string cognome, int isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/RegisterUser", ReplyAction="http://tempuri.org/IServerServices/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string email, string passw, string nome, string cognome, int isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/LoginUser", ReplyAction="http://tempuri.org/IServerServices/LoginUserResponse")]
        bool LoginUser(string email, string passw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/LoginUser", ReplyAction="http://tempuri.org/IServerServices/LoginUserResponse")]
        System.Threading.Tasks.Task<bool> LoginUserAsync(string email, string passw);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServicesChannel : cineteca.ServiceReference.IServerServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerServicesClient : System.ServiceModel.ClientBase<cineteca.ServiceReference.IServerServices>, cineteca.ServiceReference.IServerServices {
        
        public ServerServicesClient() {
        }
        
        public ServerServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DoWork() {
            return base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task<bool> DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string GetNomeUtente() {
            return base.Channel.GetNomeUtente();
        }
        
        public System.Threading.Tasks.Task<string> GetNomeUtenteAsync() {
            return base.Channel.GetNomeUtenteAsync();
        }
        
        public bool RegisterUser(string email, string passw, string nome, string cognome, int isAdmin) {
            return base.Channel.RegisterUser(email, passw, nome, cognome, isAdmin);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string email, string passw, string nome, string cognome, int isAdmin) {
            return base.Channel.RegisterUserAsync(email, passw, nome, cognome, isAdmin);
        }
        
        public bool LoginUser(string email, string passw) {
            return base.Channel.LoginUser(email, passw);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserAsync(string email, string passw) {
            return base.Channel.LoginUserAsync(email, passw);
        }
    }
}
