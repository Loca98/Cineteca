//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cineteca.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Film", Namespace="http://schemas.datacontract.org/2004/07/WCFServer")]
    [System.SerializableAttribute()]
    public partial class Film : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServerServices")]
    public interface IServerServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/DoWork", ReplyAction="http://tempuri.org/IServerServices/DoWorkResponse")]
        bool DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/DoWork", ReplyAction="http://tempuri.org/IServerServices/DoWorkResponse")]
        System.Threading.Tasks.Task<bool> DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/GetNomeUtente", ReplyAction="http://tempuri.org/IServerServices/GetNomeUtenteResponse")]
        string GetNomeUtente();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/GetNomeUtente", ReplyAction="http://tempuri.org/IServerServices/GetNomeUtenteResponse")]
        System.Threading.Tasks.Task<string> GetNomeUtenteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/RegisterUser", ReplyAction="http://tempuri.org/IServerServices/RegisterUserResponse")]
        bool RegisterUser(string email, string passw, string nome, string cognome, int isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/RegisterUser", ReplyAction="http://tempuri.org/IServerServices/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string email, string passw, string nome, string cognome, int isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/GetFilmsList", ReplyAction="http://tempuri.org/IServerServices/GetFilmsListResponse")]
        cineteca.ServiceReference.Film[] GetFilmsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerServices/GetFilmsList", ReplyAction="http://tempuri.org/IServerServices/GetFilmsListResponse")]
        System.Threading.Tasks.Task<cineteca.ServiceReference.Film[]> GetFilmsListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServicesChannel : cineteca.ServiceReference.IServerServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerServicesClient : System.ServiceModel.ClientBase<cineteca.ServiceReference.IServerServices>, cineteca.ServiceReference.IServerServices {
        
        public ServerServicesClient() {
        }
        
        public ServerServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DoWork() {
            return base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task<bool> DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string GetNomeUtente() {
            return base.Channel.GetNomeUtente();
        }
        
        public System.Threading.Tasks.Task<string> GetNomeUtenteAsync() {
            return base.Channel.GetNomeUtenteAsync();
        }
        
        public bool RegisterUser(string email, string passw, string nome, string cognome, int isAdmin) {
            return base.Channel.RegisterUser(email, passw, nome, cognome, isAdmin);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string email, string passw, string nome, string cognome, int isAdmin) {
            return base.Channel.RegisterUserAsync(email, passw, nome, cognome, isAdmin);
        }
        
        public cineteca.ServiceReference.Film[] GetFilmsList() {
            return base.Channel.GetFilmsList();
        }
        
        public System.Threading.Tasks.Task<cineteca.ServiceReference.Film[]> GetFilmsListAsync() {
            return base.Channel.GetFilmsListAsync();
        }
    }
}
